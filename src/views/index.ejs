<div class="container py-3 py-md-4">
  <div class="row gy-4">
    <!-- Voting section -->
    <div class="col-lg-8 order-1 order-lg-1">
      <% if (hasCards) { %>
      <h1 class="h4 mb-3">Which card art do you prefer?</h1>
      <p class="text-muted mb-4">
        Click on the card with the artwork you find most appealing.
      </p>

      <div
        class="d-flex flex-column flex-sm-row justify-content-center align-items-center"
      >
        <div class="voting-container mb-4 mb-sm-0 mx-auto mx-sm-2">
          <%- include('components/card', {card: cards[0]}) %>
        </div>

        <!-- VS Badge -->
        <div
          class="vs-badge-container d-flex justify-content-center align-items-center"
        >
          <div class="vs-badge">VS</div>
        </div>

        <div class="voting-container mx-auto mx-sm-2">
          <%- include('components/card', {card: cards[1]}) %>
        </div>
      </div>
      <% } else { %>
      <div class="alert alert-info">
        <h4 class="alert-heading">No Cards Available</h4>
        <p>
          The database is currently empty. Please import some cards using the
          admin interface.
        </p>
        <hr />
        <p class="mb-0">
          If you're the site administrator, you can import cards by visiting
          <code>/admin/import?key=YOUR_ADMIN_KEY</code> with your admin key.
        </p>
      </div>
      <% } %>
    </div>

    <!-- Rankings section -->
    <div class="rankings col-lg-4 order-2 order-lg-2 mb-lg-0 mx-3 mx-lg-0">
      <div class="card">
        <div class="card-header">
          <h2 class="h5 mb-0">Top 10 card art</h2>
        </div>
        <div class="card-body p-0">
          <% if (topRankings && topRankings.length > 0) { %>
          <ul class="list-group list-group-flush">
            <% topRankings.forEach((card, index) => { %>
            <li class="list-group-item d-flex align-items-center">
              <span class="fw-bold text-end" style="min-width: 28px"
                ><%= index + 1 %>.</span
              >

              <!-- Wrap the content in a link to Scryfall -->
              <a
                href="https://scryfall.com/card/<%= card.scryfallId %>"
                class="d-flex align-items-center text-decoration-none flex-grow-1"
                target="_blank"
                rel="noopener noreferrer"
              >
                <img
                  src="<%= getArtCropUrl(card.scryfallId) %>"
                  alt="<%= card.name %>"
                  class="ms-2 me-2 rounded"
                  style="width: 40px; height: 40px; object-fit: cover"
                  onerror="this.onerror=null; this.src='/api/card-back-thumb';"
                />

                <div class="flex-grow-1">
                  <div
                    class="fw-medium text-start text-dark"
                    title="<%= card.name %>"
                  >
                    <%= card.name %>
                  </div>
                  <small class="text-muted">
                    <span class="ranking-rating"
                      ><%= card.formattedRating %></span
                    >
                    points (<%= card.comparisons %> votes)
                  </small>
                </div>
              </a>
            </li>
            <% }) %>
          </ul>
          <% } else { %>
          <p class="p-3 text-center">
            No rankings available yet.<br />Start voting to see cards here!
          </p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Get all cards and attach click handlers
    const cards = document.querySelectorAll(".voting-card");

    // Attach click handlers to each card
    cards.forEach((card) => {
      card.addEventListener("click", async function () {
        const cardId = this.dataset.cardId;
        console.log("Card clicked, ID:", cardId);

        if (!cardId) {
          console.error("Missing card ID on clicked element:", this);
          return;
        }

        // Find the other card's ID
        let otherCardId = null;
        for (const c of cards) {
          if (c !== this && c.dataset.cardId) {
            otherCardId = c.dataset.cardId;
            break;
          }
        }

        console.log("Other card ID:", otherCardId);

        if (!otherCardId) {
          console.error("Could not find other card ID");
          return;
        }

        // Add visual feedback
        this.classList.add("card-selected");

        // Send vote to server
        try {
          const response = await fetch("/api/vote", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              selectedCardId: cardId,
              cardId: otherCardId,
            }),
          });

          if (response.ok) {
            const result = await response.json();
            console.log("Vote successful:", result);

            // Show rating change animation with arrow
            const ratingChange = result.winner.change;
            const changeElement = document.createElement("div");
            changeElement.className = "rating-change";

            // Use an arrow icon instead of the number
            if (ratingChange > 0) {
              // Add a Font Awesome up arrow icon
              changeElement.innerHTML = '<i class="fas fa-arrow-up"></i>';
              changeElement.style.color = "#28a745"; // Green for positive
            } else {
              // For negative changes (rare in this context)
              changeElement.innerHTML = '<i class="fas fa-arrow-down"></i>';
              changeElement.style.color = "#dc3545"; // Red for negative
            }

            this.appendChild(changeElement);

            // Animate
            setTimeout(() => {
              changeElement.style.opacity = "1";
              changeElement.style.transform = "translate(-50%, -20px)";
            }, 50);

            // Load new cards after a delay
            setTimeout(() => {
              window.location.reload();
            }, 1200);
          } else {
            const error = await response.json();
            console.error("Vote failed:", error);
            alert("Error submitting vote. Please try again.");
          }
        } catch (error) {
          console.error("Error submitting vote:", error);
          alert(
            "Network error when submitting vote. Please check your connection."
          );
        }
      });
    });
  });
</script>
